#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 19 17:07:38 2019

@author: shadi
"""
#the data is a matrix of no_channel*windowsize

def apply_eeg_feat_py (data,fs):


    import numpy as np
    from scipy.signal import hilbert 
    from scipy.signal import butter, lfilter
    
    
    #constants
    #the input is a matrix of no_channel*windowsize
    
    #x_temp : input 
    #fs = 200  
                             
    no_chan=data.size[0]
    #data=np.random.uniform( 0, 100,(no_chan, fs*dur))
    
    
    
    
    ## functions for extracting spectral features 
    # Get real amplitudes of FFT (only in postive frequencies)
    def run_eeg_band(data,fs):
    #    for i in data
        
        fft_vals = np.absolute(np.fft.rfft(data))
    
        # Get frequencies for amplitudes in Hz
        fft_freq = np.fft.rfftfreq(len(data), 1.0/fs)
    
        # Define EEG bands
        eeg_bands = {'Delta': (0, 4), #0.5,4
                 'Theta': (4, 8), # 4,8
                 'Alpha': (8, 12), # 8,13
                 'Beta': (12, 30), # 14,30
                 'Gamma': (30, 45)} #32,45 
    
        # Take the mean of the fft amplitude for each EEG band
        eeg_band_fft = dict()
        for band in eeg_bands:  
            freq_ix = np.where((fft_freq >= eeg_bands[band][0]) & 
                           (fft_freq <= eeg_bands[band][1]))[0]
            eeg_band_fft[band] = np.mean(fft_vals[freq_ix])
        return  eeg_band_fft
    
    
    # low and high pass filter 
    def butter_bandpass(lowcut, highcut, fs, order=5):
        nyq = 0.5 * fs
        low = lowcut / nyq
        high = highcut / nyq
        b, a = butter(order, [low, high], btype='band')
        return b, a
    
    
    def butter_bandpass_filter(data, lowcut, highcut, fs, order=5):
        b, a = butter_bandpass(lowcut, highcut, fs, order=order)
        y = lfilter(b, a, data)
        return y
        
        
        
        
    # functions for extracting connectivity 
    def comp_inst_phase(x_temp):
        if x_temp.ndim != 1:
            x_temp = x_temp.reshape(len(x_temp))
       
        analytic_signal = hilbert(x_temp)
        analytic_signal=np.array(analytic_signal)
        instantaneous_phase = np.unwrap(np.angle(analytic_signal))
        instantaneous_frequency = (np.diff(instantaneous_phase) /(2.0*np.pi) * sampling_rate)
        instantaneous_frequency = np.append(instantaneous_frequency,instantaneous_frequency[-1])
        return instantaneous_frequency
    ## mean phase coherence
    def MPC(a,b):
        inst_phase_sig1=comp_inst_phase(a)
        inst_phase_sig2=comp_inst_phase(b)
        inst_phase_diff=inst_phase_sig1-inst_phase_sig2
        mpc = (np.mean(np.cos(inst_phase_diff))**2 + np.mean(np.sin(inst_phase_diff))**2)**(0.5);
        return mpc 
    
    
    
    def connect_choose(inp):
        inp2=[]
        mpc=np.triu(inp)
        ind=np.nonzero(mpc)
        mpc2=mpc[ind[0],ind[1]]
        ind2=np.where(mpc2!=1)[0]
        inp2=[np.transpose(mpc2[ind2])]
        return inp2
    
    #    mpc=t
    ## concatenate spectral features 
    eeg_spec_all2=[]
    for i in range(no_chan):
        eeg_spec=run_eeg_band(data[i,:],fs) # output dict size(5) it's like cell 
        eeg_spec_all=[eeg_spec['Delta'],eeg_spec['Theta'],eeg_spec['Alpha'],eeg_spec['Beta'],eeg_spec['Gamma']]
        eeg_spec_all2.append(eeg_spec_all)
        
        
    eeg_spec_all3 = np.reshape(eeg_spec_all2, (1, no_chan*5))
    
    ## concatenate connectivity features 
    
    mpc_delta =np.zeros((no_chan,no_chan))
    mpc_theta =np.zeros((no_chan,no_chan))
    mpc_alpha =np.zeros((no_chan,no_chan))
    mpc_beta =np.zeros((no_chan,no_chan))
    mpc_gamma =np.zeros((no_chan,no_chan))
    
    
    
    
    for i in range(no_chan):
        for j in range(no_chan):
            data1=data[i,:]
            data2=data[j,:]
            
            delta1= butter_bandpass_filter(data1, 0.5, 4, fs, order=6)
            delta2= butter_bandpass_filter(data2, 0.5, 4, fs, order=6)
    
            theta1= butter_bandpass_filter(data1, 4, 8, fs, order=6)
            theta2= butter_bandpass_filter(data2, 4, 8, fs, order=6)
            
            alpha1= butter_bandpass_filter(data1, 8, 13, fs, order=6)
            alpha2= butter_bandpass_filter(data2, 8, 13, fs, order=6)
            
            beta1= butter_bandpass_filter(data1, 14, 30, fs, order=6)
            beta2= butter_bandpass_filter(data2, 14, 30, fs, order=6)
            
            gamma1= butter_bandpass_filter(data1, 32, 45, fs, order=6)
            gamma2= butter_bandpass_filter(data2, 32, 45, fs, order=6)
            
            mpc_delta[i,j]=MPC(delta1,delta2)
            mpc_theta[i,j]=MPC(theta1,theta2)
            mpc_alpha[i,j]=MPC(alpha1,alpha2)
            mpc_beta[i,j]=MPC(beta1,beta2)
            mpc_gamma[i,j]=MPC(gamma1,gamma2)
    
    mpc_delta2=connect_choose(mpc_delta);
    mpc_theta2=connect_choose(mpc_theta);
    mpc_alpha2=connect_choose(mpc_alpha);
    mpc_beta2=connect_choose(mpc_beta);
    mpc_gamma2=connect_choose(mpc_gamma);
    mpc_all=[mpc_delta2,mpc_theta2,mpc_alpha2,mpc_beta2,mpc_gamma2];
    connect_shape=mpc_delta2[0].shape[0]
    mpc_all2 = np.reshape(mpc_all, (1, connect_shape*5))
          
    # concatante all features 
    #[mpc_all2].extend([eeg_spec_all3])
    all_feat=[mpc_all2,eeg_spec_all3]
#    all_shape=mpc_all2.shape[1]+eeg_spec_all3.shape[1]
    #all_feat2=np.reshape(all_feat, (1, all_shape))
    
    return all_feat
    
    
    
